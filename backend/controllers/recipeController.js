const Recipe = require('../models/Recipe');
const { OpenAI } = require('openai');
const axios = require('axios');
const getNextId = require('./getNextId');

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
    baseURL: 'https://openrouter.ai/api/v1'
});

// üì∏ L·∫•y ·∫£nh t·ª´ Pixabay
async function getRecipeImage(keyword) {
    try {
        const response = await axios.get('https://pixabay.com/api/', {
            params: {
                key: process.env.PIXABAY_API_KEY,
                q: keyword,
                image_type: 'photo',
                per_page: 3,
            }
        });
        const hits = response.data.hits;
        return hits.length > 0 ? hits[0].webformatURL : '';
    } catch (error) {
        console.error("L·ªói l·∫•y ·∫£nh t·ª´ Pixabay:", error.message);
        return '';
    }
}

// üì• L·∫•y ·∫£nh cho t·ª´ng b∆∞·ªõc n·∫•u ƒÉn
async function getStepImages(stepDescriptions) {
    const stepObjects = [];
    for (const description of stepDescriptions) {
        const image = await getRecipeImage(description);
        stepObjects.push({ description, image });
    }
    return stepObjects;
}

// üîç Parse n·ªôi dung t·ª´ GPT: t√°ch nguy√™n li·ªáu + danh s√°ch b∆∞·ªõc m√¥ t·∫£
function parseRawGPTContent(content) {
    const ingredients = content.match(/(?<=Nguy√™n li·ªáu:)([\s\S]*?)(?=C√°ch l√†m:)/i)?.[0]
        .split('\n')
        .map(i => i.trim())
        .filter(i => i.length > 0);

    const stepDescriptions = content.match(/(?<=C√°ch l√†m:)([\s\S]*)/i)?.[0]
        .split('\n')
        .map(s => s.trim())
        .filter(s => s.length > 0);

    return { ingredients, stepDescriptions };
}

// üìö L·∫•y to√†n b·ªô c√¥ng th·ª©c
exports.getRecipes = async (req, res) => {
    try {
        const recipes = await Recipe.find();
        res.json(recipes);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server" });
    }
};

// ‚ûï Th√™m c√¥ng th·ª©c m·ªõi
exports.createRecipe = async (req, res) => {
    try {
        const newRecipe = new Recipe(req.body);
        await newRecipe.save();
        res.status(201).json(newRecipe);
    } catch (error) {
        res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o m√≥n ƒÉn" });
    }
};

// ‚ùå X√≥a c√¥ng th·ª©c
exports.deleteRecipe = async (req, res) => {
    try {
        await Recipe.findByIdAndDelete(req.params.id);
        res.json({ message: "ƒê√£ x√≥a c√¥ng th·ª©c!" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi x√≥a c√¥ng th·ª©c" });
    }
};

// üîç L·∫•y c√¥ng th·ª©c theo ID
exports.getRecipeById = async (req, res) => {
    try {
        const recipe = await Recipe.findById(req.params.id);
        if (!recipe) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y c√¥ng th·ª©c" });
        }
        res.json(recipe);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server" });
    }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t c√¥ng th·ª©c
exports.updateRecipe = async (req, res) => {
    try {
        const updatedRecipe = await Recipe.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedRecipe) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y c√¥ng th·ª©c" });
        }
        res.json(updatedRecipe);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t c√¥ng th·ª©c" });
    }
};

// üîç T√¨m ki·∫øm theo t√™n m√≥n ƒÉn
exports.searchRecipes = async (req, res) => {
    try {
        const keyword = req.query.q ? req.query.q.trim() : '';
        let recipes = await Recipe.find({ name: { $regex: keyword, $options: 'i' } });

        if (recipes.length > 0) return res.json(recipes);

        const gptResponse = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages: [{
                role: 'user',
                content: `H√£y cung c·∫•p c√¥ng th·ª©c n·∫•u ƒÉn cho m√≥n ${keyword}. Bao g·ªìm nguy√™n li·ªáu v√† c√°ch l√†m.`
            }]
        });

        const gptContent = gptResponse.choices[0].message.content;
        const { ingredients, stepDescriptions } = parseRawGPTContent(gptContent);
        const steps = await getStepImages(stepDescriptions);
        const imageUrl = await getRecipeImage(keyword);
        const nextId = await getNextId('recipeId');

        const newRecipe = new Recipe({
            id: nextId,
            name: keyword,
            author: "Gpt",
            image: imageUrl,
            ingredients,
            steps
        });

        await newRecipe.save();
        res.status(201).json([newRecipe]);

    } catch (error) {
        console.error("L·ªói searchRecipes:", error);
        res.status(500).json({ message: "L·ªói khi t√¨m ki·∫øm c√¥ng th·ª©c" });
    }
};

// üßÇ L·ªçc c√¥ng th·ª©c theo nguy√™n li·ªáu
exports.filterRecipesByIngredient = async (req, res) => {
    try {
        const ingredient = req.query.q.trim();
        let recipes = await Recipe.find({
            ingredients: { $elemMatch: { $regex: ingredient, $options: 'i' } }
        });

        if (recipes.length > 0) return res.json(recipes);

        const gptResponse = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages: [{
                role: 'user',
                content: `H√£y cung c·∫•p c√¥ng th·ª©c n·∫•u ƒÉn v·ªõi nguy√™n li·ªáu ${ingredient}. Bao g·ªìm nguy√™n li·ªáu v√† c√°ch l√†m.`
            }]
        });

        const gptContent = gptResponse.choices[0].message.content;
        const { ingredients: newIngredients, stepDescriptions } = parseRawGPTContent(gptContent);
        const steps = await getStepImages(stepDescriptions);
        const imageUrl = await getRecipeImage(ingredient);
        const nextId = await getNextId('recipeId');

        const newRecipe = new Recipe({
            id: nextId,
            name: `C√¥ng th·ª©c v·ªõi ${ingredient}`,
            author: "System",
            image: imageUrl,
            ingredients: newIngredients,
            steps
        });

        await newRecipe.save();
        res.status(201).json(newRecipe);

    } catch (error) {
        console.error("L·ªói filterRecipesByIngredient:", error);
        res.status(500).json({ message: "L·ªói khi l·ªçc c√¥ng th·ª©c" });
    }
};
